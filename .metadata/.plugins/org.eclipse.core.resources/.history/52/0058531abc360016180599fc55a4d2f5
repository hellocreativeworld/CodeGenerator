package gen;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;

import CPP.Yylex;
import CPP.parser;
import CPP.Absyn.Program;

public class Main {

	public static void main(String[] args) {
		
		try {
			
			File f = new File(args[0]);
			f.createNewFile();
			if(!f.exists()){
			System.out.println("File does not exist");
			}
			Yylex l = new Yylex(new FileReader(f));
			// l = new Yylex(new FileReader("good.cc")); //TODO: find out what this is
			
			parser p = new parser(l);
				
				CPP.Absyn.Program parse_tree;
				try {
					parse_tree = p.pProgram();
					generate(parse_tree);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					System.out.println(e);
				}
				
		}catch(IOException e){
			System.out.println(e.getMessage());
		}

	}
	
	/**
	 * The idea is to go through the parse tree and genreate for each line of code the corresponding llvm code
	 * and write this always in a string
	 * whenever the line is done it goes back to the compile stm 
	 * the new string shall be printed in the jasmin file
	 * which is generated at the beginning
	 * when the parse tree ended
	 * call jasmin and execute the generated class file.
	 * thing concerning visitor pattern check the typechecker and the corrsponing classes with check* istead of compile*
	 * 
	 * SO implement the visitor pattern
	 * implemnt the functions
	 * 			-read through the doc of llvm to find the correct string values for the functions
	 * print the string in an existing file
	 * make java to execute jasmin and with that text file
	 * For any 
	 * 
	 * 
	 * maybe it does make sense to do sysos in every visit and eval 
	 * @param parse_tree
	 */
	
	private static void generate(Program parse_tree) {
		Compiler c = new Compiler();
		System.out.println(parse_tree.toString());
		c.eval(parse_tree);
		
	}
	
	

}
